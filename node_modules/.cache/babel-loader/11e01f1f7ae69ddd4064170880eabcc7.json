{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\nimport { conversionTable } from \"../../functions/conversionTable\";\nimport between from \"../../assets/between.png\";\nimport long from \"../../assets/long.png\";\nimport short from \"../../assets/short.png\";\nimport low from \"../../assets/low.png\";\nimport \"./index.css\"; // SPEECH RECOGNITION\n\nconst options = {\n  autoStart: false\n};\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening\n}) => {\n  //ANIMATIONS\n  const [nameOfCharPlaying, setNameOfCharPlaying] = useState(\"\");\n  const [url, setUrl] = useState(low);\n  const [classNameButton, setClassNameButton] = useState(\"start\");\n  const [classNamePlayButton, setClassNamePlayButton] = useState(\"hide\");\n  const [h3content, setH3Content] = useState(`press ðŸ”´ record to start`);\n  const [answer, setAnswer] = useState(\"Vessel in distress! Captain, your vessel is caught in a wild storm and flooding quickly. Call for help to save you and your crew from drowning. But SOS gives no response! Hurry, send the right message to save our souls!\");\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"#222224\",\n    minHeight: \"100vh\",\n    minWidth: \"100vw\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"auto\",\n    margin: \"0\",\n    backgroundPosition: \"center\"\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString); // ANIMATIONS 2\n\n  let timing;\n  let time = 0;\n  let transitionTime = 20;\n\n  function animateShort() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displayShort, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 180;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function animateLong() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displayLong, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 380;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function animateSpace() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displaySpace, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 820;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function displayShort() {\n    setNameOfCharPlaying(\".\");\n    setUrl(short);\n  }\n\n  function displayLong() {\n    setNameOfCharPlaying(\"_\");\n    setUrl(long);\n  }\n\n  function displayBetween() {\n    setUrl(between);\n  }\n\n  function displaySpace() {\n    setNameOfCharPlaying(\"-\");\n    setUrl(low);\n  }\n\n  function animationStart() {\n    morseStringCharacters.map(char => {\n      if (char === \".\") {\n        animateShort();\n      }\n\n      if (char === \"_\") {\n        animateLong();\n      } else if (char === \" \") {\n        animateSpace();\n      }\n    });\n  }\n\n  function afterRecord() {\n    setClassNameButton(\"hide\");\n    setClassNamePlayButton(\"green\");\n    setH3Content(`press â–¶ to start playing`);\n  }\n\n  function pageRefresh() {\n    window.location.reload();\n  }\n\n  function respondToMessage() {\n    console.log(\"time\", time);\n    const magicWord = \"please\";\n    const messageResponse = {\n      right: \"Well done, captain! You have made it ashore and save many lives from certain death.\",\n      wrong: \"No response, nothing happens! Try another 'magic word'!\"\n    };\n\n    if (transcript === magicWord) {\n      setAnswer(messageResponse.right);\n    } else {\n      setAnswer(messageResponse.wrong);\n    }\n  }\n\n  function checkAnswer() {\n    setTimeout(respondToMessage, time + 100);\n    setTimeout(pageRefresh, time + 5000);\n  }\n\n  function animateSOS() {\n    const morseSOS = convertToMorseString(\"SOS\", conversionTable);\n    const morseStringSOS = convertMorseStringToChars(morseSOS);\n    morseStringSOS.map(char => {\n      if (char === \".\") {\n        animateShort();\n      }\n\n      if (char === \"_\") {\n        animateLong();\n      } else if (char === \" \") {\n        animateSpace();\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transition\",\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(\"sos\");\n      animateSOS();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, \"Send SOS\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      startListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDD34\"), \" Message\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      abortListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \"\\u25FD Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(transcript);\n      animationStart();\n      abortListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, \"\\u25B6 Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: pageRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, h3content), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"nameOfCharPlaying\",\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, nameOfCharPlaying), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"yourMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, \"Your Message: \", transcript), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"inMorse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \" In Morse Code: \", morseString), /*#__PURE__*/React.createElement(\"h1\", {\n    onClick: e => {\n      startListening();\n      afterRecord();\n    },\n    className: `${classNameButton}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDD34\")), /*#__PURE__*/React.createElement(\"h1\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(transcript);\n      abortListening();\n      animationStart();\n      checkAnswer();\n    },\n    className: `${classNamePlayButton}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greenButton\",\n    role: \"img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, \"\\u25B6\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"700px\",\n      width: \"500px\",\n      marginLeft: \"820px\",\n      color: \"white\",\n      textAlign: \"right\",\n      lineHeight: \"2.5em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }, answer)));\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js"],"names":["React","useState","PropTypes","SpeechRecognition","convertToMorseString","convertTranscriptToMorseSound","convertMorseStringToChars","conversionTable","between","long","short","low","options","autoStart","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","abortListening","startListening","Dictaphone","nameOfCharPlaying","setNameOfCharPlaying","url","setUrl","classNameButton","setClassNameButton","classNamePlayButton","setClassNamePlayButton","h3content","setH3Content","answer","setAnswer","style","textAlign","backgroundImage","backgroundColor","minHeight","minWidth","backgroundRepeat","backgroundSize","margin","backgroundPosition","morseString","morseStringCharacters","timing","time","transitionTime","animateShort","setTimeout","displayShort","displayBetween","displaySpace","animateLong","displayLong","animateSpace","animationStart","map","char","afterRecord","pageRefresh","window","location","reload","respondToMessage","console","log","magicWord","messageResponse","right","wrong","checkAnswer","animateSOS","morseSOS","morseStringSOS","e","color","marginTop","width","marginLeft","lineHeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\n\nimport { conversionTable } from \"../../functions/conversionTable\";\n\nimport between from \"../../assets/between.png\";\nimport long from \"../../assets/long.png\";\nimport short from \"../../assets/short.png\";\nimport low from \"../../assets/low.png\";\nimport \"./index.css\";\n\n// SPEECH RECOGNITION\nconst options = {\n  autoStart: false,\n};\n\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func,\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening,\n}) => {\n  //ANIMATIONS\n  const [nameOfCharPlaying, setNameOfCharPlaying] = useState(\"\");\n  const [url, setUrl] = useState(low);\n  const [classNameButton, setClassNameButton] = useState(\"start\");\n  const [classNamePlayButton, setClassNamePlayButton] = useState(\"hide\");\n  const [h3content, setH3Content] = useState(`press ðŸ”´ record to start`);\n  const [answer, setAnswer] = useState(\n    \"Vessel in distress! Captain, your vessel is caught in a wild storm and flooding quickly. Call for help to save you and your crew from drowning. But SOS gives no response! Hurry, send the right message to save our souls!\"\n  );\n\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"#222224\",\n    minHeight: \"100vh\",\n    minWidth: \"100vw\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"auto\",\n    margin: \"0\",\n    backgroundPosition: \"center\",\n  };\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString);\n\n  // ANIMATIONS 2\n  let timing;\n  let time = 0;\n  let transitionTime = 20;\n  function animateShort() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displayShort, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 180;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function animateLong() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displayLong, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 380;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function animateSpace() {\n    time = time + 80 - transitionTime;\n    timing = setTimeout(displaySpace, time);\n    time = time + transitionTime;\n    timing = setTimeout(displayBetween, time);\n    time = time + 820;\n    timing = setTimeout(displaySpace, time);\n  }\n\n  function displayShort() {\n    setNameOfCharPlaying(\".\");\n    setUrl(short);\n  }\n\n  function displayLong() {\n    setNameOfCharPlaying(\"_\");\n    setUrl(long);\n  }\n\n  function displayBetween() {\n    setUrl(between);\n  }\n\n  function displaySpace() {\n    setNameOfCharPlaying(\"-\");\n    setUrl(low);\n  }\n\n  function animationStart() {\n    morseStringCharacters.map((char) => {\n      if (char === \".\") {\n        animateShort();\n      }\n      if (char === \"_\") {\n        animateLong();\n      } else if (char === \" \") {\n        animateSpace();\n      }\n    });\n  }\n\n  function afterRecord() {\n    setClassNameButton(\"hide\");\n    setClassNamePlayButton(\"green\");\n    setH3Content(`press â–¶ to start playing`);\n  }\n\n  function pageRefresh() {\n    window.location.reload();\n  }\n\n  function respondToMessage() {\n    console.log(\"time\", time);\n    const magicWord = \"please\";\n    const messageResponse = {\n      right:\n        \"Well done, captain! You have made it ashore and save many lives from certain death.\",\n      wrong: \"No response, nothing happens! Try another 'magic word'!\",\n    };\n    if (transcript === magicWord) {\n      setAnswer(messageResponse.right);\n    } else {\n      setAnswer(messageResponse.wrong);\n    }\n  }\n\n  function checkAnswer() {\n    setTimeout(respondToMessage, time + 100);\n    setTimeout(pageRefresh, time + 5000);\n  }\n\n  function animateSOS() {\n    const morseSOS = convertToMorseString(\"SOS\", conversionTable);\n    const morseStringSOS = convertMorseStringToChars(morseSOS);\n    morseStringSOS.map((char) => {\n      if (char === \".\") {\n        animateShort();\n      }\n      if (char === \"_\") {\n        animateLong();\n      } else if (char === \" \") {\n        animateSpace();\n      }\n    });\n  }\n\n  return (\n    <div className=\"transition\" style={style}>\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(\"sos\");\n          animateSOS();\n        }}\n      >\n        Send SOS\n      </button>\n\n      <button\n        onClick={(e) => {\n          startListening();\n        }}\n      >\n        <span role=\"img\">ðŸ”´</span> Message\n      </button>\n      <button\n        onClick={(e) => {\n          abortListening();\n        }}\n      >\n        â—½ Stop\n      </button>\n\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(transcript);\n          animationStart();\n          abortListening();\n        }}\n      >\n        â–¶ Play\n      </button>\n      <button onClick={pageRefresh}>Reset</button>\n\n      <h3>{h3content}</h3>\n\n      <h1 className=\"nameOfCharPlaying\" style={{ color: \"white\" }}>\n        {nameOfCharPlaying}\n      </h1>\n\n      <h3 className=\"yourMessage\">Your Message: {transcript}</h3>\n      <h3 className=\"inMorse\"> In Morse Code: {morseString}</h3>\n\n      <h1\n        onClick={(e) => {\n          startListening();\n          afterRecord();\n        }}\n        className={`${classNameButton}`}\n      >\n        <span role=\"img\">ðŸ”´</span>\n      </h1>\n\n      <h1\n        onClick={(e) => {\n          convertTranscriptToMorseSound(transcript);\n          abortListening();\n          animationStart();\n          checkAnswer();\n        }}\n        className={`${classNamePlayButton}`}\n      >\n        <span className=\"greenButton\" role=\"img\">\n          â–¶\n        </span>\n      </h1>\n\n      <div\n        style={{\n          marginTop: \"700px\",\n          width: \"500px\",\n          marginLeft: \"820px\",\n          color: \"white\",\n          textAlign: \"right\",\n          lineHeight: \"2.5em\",\n        }}\n      >\n        <h2>{answer}</h2>\n      </div>\n    </div>\n  );\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);\n"]},"metadata":{},"sourceType":"module"}