{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js\";\nimport React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\nexport default function MorseToSound(props) {\n  console.log('r');\n  var globalAudioContext = new window.AudioContext();\n  const [color, setColor] = useState('');\n  const [name, setName] = useState('type');\n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime; // morsecode\n\n    var conversionTable = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\"\n    };\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n\n      for (var i = 0; i <= transcript.length; i++) {\n        let toConvertChar = transcript.substr(i, 1).toLowerCase();\n        let convertedChar = conversionTable[toConvertChar];\n\n        if (convertedChar === undefined) {\n          convertedChar = \" \";\n        }\n\n        morseString.push(convertedChar); // recognised character\n      }\n\n      return morseString;\n    }\n\n    let myVar;\n    let timeAnimation = 0;\n    let morseString = props.transcript;\n    const lightBulb = {\n      width: \"200px\",\n      height: \"200px\",\n      borderRadius: \"50%\",\n      backgroundColor: color\n    };\n\n    function setTheTimeOutGreen() {\n      timeAnimation = timeAnimation + 20;\n      console.log('green');\n      myVar = setTimeout(setGreen, timeAnimation);\n      timeAnimation = timeAnimation + 80;\n      myVar = setTimeout(setNull, timeAnimation);\n    }\n\n    function setTheTimeOutPurple() {\n      timeAnimation = timeAnimation + 20;\n      console.log('purple');\n      myVar = setTimeout(setPurple, timeAnimation);\n      timeAnimation = timeAnimation + 280;\n      myVar = setTimeout(setNull, timeAnimation);\n    }\n\n    function setTheTimeOutRed() {\n      timeAnimation = timeAnimation + 20;\n      console.log('red');\n      myVar = setTimeout(setRed, timeAnimation);\n      timeAnimation = timeAnimation + 680;\n      myVar = setTimeout(setNull, timeAnimation);\n    }\n\n    function setGreen() {\n      setColor('green');\n      setName('kort');\n    }\n\n    function setPurple() {\n      setColor('purple');\n      setName('lang');\n    }\n\n    function setRed() {\n      setColor('red');\n      setName('einde');\n    }\n\n    function setNull() {\n      setColor('white');\n    }\n\n    let morseStringCharacters = [];\n    morseString.map(function (c) {\n      for (let i = 0; i < c.length; i++) {\n        morseStringCharacters.push(c[i]);\n      }\n    }); // generate time for code\n\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n        timedata *= unit;\n\n        if (timedata > 0) {\n          maketone(timedata);\n          time += timedata; // tone gap\n\n          time += unit * 1;\n        }\n      } // char gap\n\n\n      time += unit * 2;\n    } // generate tone for time\n\n\n    function maketone(data) {\n      var start = time;\n      var stop = time + data; // filter: envelope the tone slightly\n\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop); // toggle achtergrond rood\n    } // create: oscillator, gain, destination\n\n\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination; // connect: oscillator -> gain -> destination\n\n    osci.connect(gain);\n    gain.connect(dest); // start oscillator\n\n    osci.start(time); // begin encoding: text -> code -> time -> tone\n\n    convertToMorse(conversionTable); // return web audio context for reuse / control\n\n    return cont;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }, \"Hello from Morse\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(\"sos\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, \"SOS Test\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.startListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.abortListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }, \"Stop Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(props.transcript);\n      props.animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, \"Play Morse Code Sound\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, \"test\"));\n}","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js"],"names":["React","useState","MorseToAnimation","MorseToSound","props","console","log","globalAudioContext","window","AudioContext","color","setColor","name","setName","morsecode","text","unit","freq","cont","time","currentTime","conversionTable","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","convertToMorse","transcript","morseString","length","toConvertChar","substr","toLowerCase","convertedChar","undefined","push","myVar","timeAnimation","lightBulb","width","height","borderRadius","backgroundColor","setTheTimeOutGreen","setTimeout","setGreen","setNull","setTheTimeOutPurple","setPurple","setTheTimeOutRed","setRed","morseStringCharacters","map","maketime","data","timedata","maketone","start","stop","gain","linearRampToValueAtTime","osci","createOscillator","frequency","value","createGain","dest","destination","connect","startListen","abortListen","animationStart"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\n\n\nexport default function MorseToSound(props) {\n  console.log('r')\n  var globalAudioContext = new window.AudioContext();\n  const [color,setColor] = useState('')\n  const [name, setName ] = useState('type')\n\n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime;\n\n    // morsecode\n    var conversionTable = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\",\n    };\n\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n      for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      \n      let convertedChar = conversionTable[toConvertChar];\n      if (convertedChar === undefined) {\n      convertedChar = \" \";\n      }\n      \n      morseString.push(convertedChar);\n      // recognised character\n      }\n      \n      return morseString;\n      } \n      let myVar;\n      let timeAnimation = 0;\n   \n      let morseString = props.transcript;\n      \n   \n\n       \n       const lightBulb = {\n           width: \"200px\",\n           height: \"200px\",\n           borderRadius: \"50%\",\n           backgroundColor: color,\n           };\n           \n   \n       function setTheTimeOutGreen(){\n        timeAnimation = timeAnimation + 20;\n           console.log('green')\n           myVar = setTimeout( setGreen, timeAnimation)\n           \n           timeAnimation = timeAnimation + 80;\n           myVar = setTimeout( setNull, timeAnimation)\n          \n           \n          \n       }\n   \n       function setTheTimeOutPurple(){\n        timeAnimation = timeAnimation + 20;\n           console.log('purple')\n           myVar = setTimeout( setPurple, timeAnimation)\n           \n           timeAnimation = timeAnimation + 280;\n           myVar = setTimeout( setNull, timeAnimation)\n          \n           \n       }\n   \n       function setTheTimeOutRed(){\n        timeAnimation = timeAnimation + 20;\n           console.log('red')\n           myVar = setTimeout( setRed, timeAnimation)\n           \n           timeAnimation = timeAnimation + 680;\n           myVar = setTimeout( setNull, timeAnimation)\n       }\n   \n       function setGreen(){\n           setColor('green')\n           setName('kort')\n       }\n   \n       function setPurple(){\n           setColor('purple')\n           setName('lang')\n       }\n   \n       function setRed(){\n           setColor('red')\n           setName('einde')\n       }\n   \n       function setNull(){\n           setColor('white')\n       }\n       \n       \n      \n     let morseStringCharacters = []\n       morseString.map(function (c) {\n    \n         for (let i = 0; i < c.length; i++) {\n        \n          morseStringCharacters.push(c[i])\n         }\n       \n     });\n\n    // generate time for code\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n\n        timedata *= unit;\n        if (timedata > 0) {\n          maketone(timedata);\n\n          time += timedata;\n          // tone gap\n          time += unit * 1;\n        }\n      }\n      // char gap\n      time += unit * 2;\n    }\n\n    // generate tone for time\n    function maketone(data) {\n      var start = time;\n      var stop = time + data;\n\n      // filter: envelope the tone slightly\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop);\n      // toggle achtergrond rood\n    }\n\n    // create: oscillator, gain, destination\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination;\n    // connect: oscillator -> gain -> destination\n    osci.connect(gain);\n    gain.connect(dest);\n    // start oscillator\n    osci.start(time);\n\n    // begin encoding: text -> code -> time -> tone\n    convertToMorse(conversionTable);\n\n    // return web audio context for reuse / control\n    return cont;\n  }\n\n  return (\n    <>\n      <div>Hello from Morse</div>\n\n      <button\n        onClick={(e) => {\n          morsecode(\"sos\");\n        }}\n      >\n        SOS Test\n      </button>\n      <button\n        onClick={(e) => {\n          props.startListen();\n        }}\n      >\n        Record\n      </button>\n      <button\n        onClick={(e) => {\n          props.abortListen();\n        }}\n      >\n        Stop Record\n      </button>\n      <button\n        onClick={(e) => {\n          morsecode(props.transcript);\n          props.animationStart();\n        }}\n      >\n        Play Morse Code Sound\n      </button>\n      <button onClick={(e)=>{props.animationStart()}}>test</button>\n      \n     \n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}