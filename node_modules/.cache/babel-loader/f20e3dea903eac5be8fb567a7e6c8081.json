{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\nimport MorseToAnimation from \"../MorseToAnimation\";\nimport { conversionTable } from \"../../functions/conversionTable\";\nimport off from \"../../assets/off.png\";\nimport between from '../../assets/between.png';\nimport long from '../../assets/long.png';\nimport short from '../../assets/short.png';\nimport low from '../../assets/low.png'; // SPEECH RECOGNITION\n\nconst options = {\n  autoStart: false\n};\nconst urlShort = \"../between.png\";\nconst urlLong = \"../../assets/long.png\";\nconst urlSpace = \"../../assets/low.png\";\nconst urlOff = \"../../assets/off.png\";\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening\n}) => {\n  //ANIMATIONS\n  const [color, setColor] = useState(\"\");\n  const [name, setName] = useState(\"press record to start\");\n  const [url, setUrl] = useState(off);\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"white\",\n    height: '900px'\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString); // ANIMATIONS 2\n\n  let timing;\n  let time = 0;\n\n  function soundShort() {\n    time = time + 80;\n    timing = setTimeout(colorShort, time);\n    time = time + 180;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundLong() {\n    time = time + 80;\n    timing = setTimeout(colorLong, time);\n    time = time + 380;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundSpace() {\n    time = time + 80;\n    timing = setTimeout(colorSpace, time);\n    time = time + 980;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function colorShort() {\n    setColor(\"green\");\n    setName(\".\");\n    setUrl(urlShort);\n  }\n\n  function colorLong() {\n    setColor(\"purple\");\n    setName(\"_\");\n    setUrl(urlLong);\n  }\n\n  function colorSpace() {\n    setColor(\"red\");\n    setName(\"space\");\n    setUrl(urlSpace);\n  }\n\n  function soundOff() {\n    setColor(\"brown\");\n    setName(\" \");\n    setUrl(urlOff);\n  }\n\n  function animationStart() {\n    morseStringCharacters.map(char => {\n      if (char === \".\") {\n        soundShort();\n      }\n\n      if (char === \"_\") {\n        soundLong();\n      } else if (char === \" \") {\n        soundSpace();\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Transcript To Morse: \", morseString), /*#__PURE__*/React.createElement(MorseToAnimation, {\n    color: color,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(transcript);\n      animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Play it!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(\"sos\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"SOS Test\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      startListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      abortListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Stop Record\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, \"Transcript: \", transcript), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, name));\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js"],"names":["React","useState","PropTypes","SpeechRecognition","convertToMorseString","convertTranscriptToMorseSound","convertMorseStringToChars","MorseToAnimation","conversionTable","off","between","long","short","low","options","autoStart","urlShort","urlLong","urlSpace","urlOff","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","abortListening","startListening","Dictaphone","color","setColor","name","setName","url","setUrl","style","textAlign","backgroundImage","backgroundColor","height","morseString","morseStringCharacters","timing","time","soundShort","setTimeout","colorShort","soundOff","soundLong","colorLong","soundSpace","colorSpace","animationStart","map","char","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,SAASC,oBAAT,QAAqC,gDAArC;AACA,SAASC,6BAAT,QAA8C,+CAA9C;AACA,SAASC,yBAAT,QAA0C,2CAA1C;AAEA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CAEA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE;AADG,CAAhB;AAIA,MAAMC,QAAQ,GAAG,gBAAjB;AACA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,QAAQ,GAAG,sBAAjB;AACA,MAAMC,MAAM,GAAG,sBAAf;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAEnB,SAAS,CAACoB,MADN;AAEhBC,EAAAA,eAAe,EAAErB,SAAS,CAACsB,IAFX;AAGhBC,EAAAA,gCAAgC,EAAEvB,SAAS,CAACwB,IAH5B;AAIhBC,EAAAA,cAAc,EAAEzB,SAAS,CAACsB,IAJV;AAKhBI,EAAAA,cAAc,EAAE1B,SAAS,CAACsB;AALV,CAAlB;;AAQA,MAAMK,UAAU,GAAG,CAAC;AAClBR,EAAAA,UADkB;AAElBE,EAAAA,eAFkB;AAGlBE,EAAAA,gCAHkB;AAIlBE,EAAAA,cAJkB;AAKlBC,EAAAA;AALkB,CAAD,KAMb;AACJ;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoB9B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC+B,IAAD,EAAOC,OAAP,IAAkBhC,QAAQ,CAAC,uBAAD,CAAhC;AACA,QAAM,CAACiC,GAAD,EAAMC,MAAN,IAAgBlC,QAAQ,CAACQ,GAAD,CAA9B;AACA,QAAM2B,KAAK,GAAG;AACZC,IAAAA,SAAS,EAAE,QADC;AAEZC,IAAAA,eAAe,EAAG,OAAMJ,GAAI,GAFhB;AAGZK,IAAAA,eAAe,EAAE,OAHL;AAIZC,IAAAA,MAAM,EAAE;AAJI,GAAd;;AAOA,MAAI,CAACf,gCAAL,EAAuC;AACrC,WAAO,IAAP;AACD;;AAED,QAAMgB,WAAW,GAAGrC,oBAAoB,CAACiB,UAAD,EAAab,eAAb,CAAxC;AACA,QAAMkC,qBAAqB,GAAGpC,yBAAyB,CAACmC,WAAD,CAAvD,CAjBI,CAmBJ;;AACA,MAAIE,MAAJ;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,WAASC,UAAT,GAAsB;AACpBD,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACC,UAAD,EAAaH,IAAb,CAAnB;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACE,QAAD,EAAWJ,IAAX,CAAnB;AACD;;AAED,WAASK,SAAT,GAAqB;AACnBL,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACI,SAAD,EAAYN,IAAZ,CAAnB;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACE,QAAD,EAAWJ,IAAX,CAAnB;AACD;;AAED,WAASO,UAAT,GAAsB;AACpBP,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACM,UAAD,EAAaR,IAAb,CAAnB;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAd;AACAD,IAAAA,MAAM,GAAGG,UAAU,CAACE,QAAD,EAAWJ,IAAX,CAAnB;AACD;;AAED,WAASG,UAAT,GAAsB;AACpBhB,IAAAA,QAAQ,CAAC,OAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,GAAD,CAAP;AACAE,IAAAA,MAAM,CAACnB,QAAD,CAAN;AACD;;AAED,WAASkC,SAAT,GAAqB;AACnBnB,IAAAA,QAAQ,CAAC,QAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,GAAD,CAAP;AACAE,IAAAA,MAAM,CAAClB,OAAD,CAAN;AACD;;AAED,WAASmC,UAAT,GAAsB;AACpBrB,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,OAAD,CAAP;AACAE,IAAAA,MAAM,CAACjB,QAAD,CAAN;AACD;;AAED,WAAS8B,QAAT,GAAoB;AAClBjB,IAAAA,QAAQ,CAAC,OAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,GAAD,CAAP;AACAE,IAAAA,MAAM,CAAChB,MAAD,CAAN;AACD;;AAED,WAASkC,cAAT,GAA0B;AACxBX,IAAAA,qBAAqB,CAACY,GAAtB,CAA2BC,IAAD,IAAU;AAClC,UAAIA,IAAI,KAAK,GAAb,EAAkB;AAChBV,QAAAA,UAAU;AACX;;AACD,UAAIU,IAAI,KAAK,GAAb,EAAkB;AAChBN,QAAAA,SAAS;AACV,OAFD,MAEO,IAAIM,IAAI,KAAK,GAAb,EAAkB;AACvBJ,QAAAA,UAAU;AACX;AACF,KATD;AAUD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAEf,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA0BK,WAA1B,CADF,eAEE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEX,KAAzB;AAAgC,IAAA,IAAI,EAAEE,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE;AAAQ,IAAA,OAAO,EAAET,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJF,eAKE;AACE,IAAA,OAAO,EAAGiC,CAAD,IAAO;AACdnD,MAAAA,6BAA6B,CAACgB,UAAD,CAA7B;AACAgC,MAAAA,cAAc;AACf,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAcE;AACE,IAAA,OAAO,EAAGG,CAAD,IAAO;AACdnD,MAAAA,6BAA6B,CAAC,KAAD,CAA7B;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,eAqBE;AACE,IAAA,OAAO,EAAGmD,CAAD,IAAO;AACd5B,MAAAA,cAAc;AACf,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,eA4BE;AACE,IAAA,OAAO,EAAG4B,CAAD,IAAO;AACd7B,MAAAA,cAAc;AACf,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA5BF,eAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiBN,UAAjB,CApCF,eAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKW,IAAL,CArCF,CADF;AAyCD,CA/HD;;AAiIAH,UAAU,CAACT,SAAX,GAAuBA,SAAvB;AACA,eAAejB,iBAAiB,CAACW,OAAD,CAAjB,CAA2Be,UAA3B,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\n\nimport MorseToAnimation from \"../MorseToAnimation\";\nimport { conversionTable } from \"../../functions/conversionTable\";\nimport off from \"../../assets/off.png\"; \nimport between from '../../assets/between.png'\nimport long from '../../assets/long.png'\nimport short from '../../assets/short.png'\nimport low from '../../assets/low.png'\n\n// SPEECH RECOGNITION\nconst options = {\n  autoStart: false,\n};\n\nconst urlShort = \"../between.png\";\nconst urlLong = \"../../assets/long.png\";\nconst urlSpace = \"../../assets/low.png\";\nconst urlOff = \"../../assets/off.png\";\n\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func,\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening,\n}) => {\n  //ANIMATIONS\n  const [color, setColor] = useState(\"\");\n  const [name, setName] = useState(\"press record to start\");\n  const [url, setUrl] = useState(off);\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"white\",\n    height: '900px',\n    \n  };\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString);\n\n  // ANIMATIONS 2\n  let timing;\n  let time = 0;\n  function soundShort() {\n    time = time + 80;\n    timing = setTimeout(colorShort, time);\n    time = time + 180;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundLong() {\n    time = time + 80;\n    timing = setTimeout(colorLong, time);\n    time = time + 380;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundSpace() {\n    time = time + 80;\n    timing = setTimeout(colorSpace, time);\n    time = time + 980;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function colorShort() {\n    setColor(\"green\");\n    setName(\".\");\n    setUrl(urlShort);\n  }\n\n  function colorLong() {\n    setColor(\"purple\");\n    setName(\"_\");\n    setUrl(urlLong);\n  }\n\n  function colorSpace() {\n    setColor(\"red\");\n    setName(\"space\");\n    setUrl(urlSpace);\n  }\n\n  function soundOff() {\n    setColor(\"brown\");\n    setName(\" \");\n    setUrl(urlOff);\n  }\n\n  function animationStart() {\n    morseStringCharacters.map((char) => {\n      if (char === \".\") {\n        soundShort();\n      }\n      if (char === \"_\") {\n        soundLong();\n      } else if (char === \" \") {\n        soundSpace();\n      }\n    });\n  }\n\n  return (\n    <div style={style}>\n      <h3>Transcript To Morse: {morseString}</h3>\n      <MorseToAnimation color={color} name={name} />\n\n      <button onClick={resetTranscript}>Reset</button>\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(transcript);\n          animationStart();\n        }}\n      >\n        Play it!\n      </button>\n\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(\"sos\");\n        }}\n      >\n        SOS Test\n      </button>\n      <button\n        onClick={(e) => {\n          startListening();\n        }}\n      >\n        Record\n      </button>\n      <button\n        onClick={(e) => {\n          abortListening();\n        }}\n      >\n        Stop Record\n      </button>\n\n      <h3>Transcript: {transcript}</h3>\n      <h1>{name}</h1>\n    </div>\n  );\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);\n"]},"metadata":{},"sourceType":"module"}