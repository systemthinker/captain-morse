{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\nimport { conversionTable } from \"../../functions/conversionTable\";\nimport off from \"../../assets/off.png\";\nimport between from \"../../assets/between.png\";\nimport long from \"../../assets/long.png\";\nimport short from \"../../assets/short.png\";\nimport low from \"../../assets/low.png\";\nimport \"./index.css\"; // SPEECH RECOGNITION\n\nconst options = {\n  autoStart: false\n};\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening\n}) => {\n  //ANIMATIONS\n  const [color, setColor] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [url, setUrl] = useState(off);\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"white\",\n    minHeight: \"100vh\",\n    minWidth: \"100vw\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"auto\",\n    margin: \"0\",\n    position: \"relative\"\n  };\n\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString); // ANIMATIONS 2\n\n  let timing;\n  let time = 0;\n\n  function soundShort() {\n    time = time + 80;\n    timing = setTimeout(colorShort, time);\n    time = time + 180;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundLong() {\n    time = time + 80;\n    timing = setTimeout(colorLong, time);\n    time = time + 380;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundSpace() {\n    time = time + 80;\n    timing = setTimeout(colorSpace, time);\n    time = time + 820;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function colorShort() {\n    setColor(\"green\");\n    setName(\".\");\n    setUrl(short);\n  }\n\n  function colorLong() {\n    setColor(\"purple\");\n    setName(\"_\");\n    setUrl(long);\n  }\n\n  function colorSpace() {\n    setColor(\"red\");\n    setName(\"space\");\n    setUrl(off);\n  }\n\n  function soundOff() {\n    setColor(\"brown\");\n    setName(\" \");\n  }\n\n  function animationStart() {\n    morseStringCharacters.map(char => {\n      if (char === \".\") {\n        soundShort();\n      }\n\n      if (char === \"_\") {\n        soundLong();\n      } else if (char === \" \") {\n        soundSpace();\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"transition\",\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(\"sos\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Send SOS\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      startListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDD34\"), \" Message\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      abortListening();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"\\u25FD Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      convertTranscriptToMorseSound(transcript);\n      animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"\\u25B6 Play\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, \"press \\uD83D\\uDD34 record to start \"), /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, name), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, \"Your Message: \", transcript), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, \" In Morse Code: \", morseString), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 6\n    }\n  }, \"\\uD83D\\uDD34\"));\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js"],"names":["React","useState","PropTypes","SpeechRecognition","convertToMorseString","convertTranscriptToMorseSound","convertMorseStringToChars","conversionTable","off","between","long","short","low","options","autoStart","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","abortListening","startListening","Dictaphone","color","setColor","name","setName","url","setUrl","style","textAlign","backgroundImage","backgroundColor","minHeight","minWidth","backgroundRepeat","backgroundSize","margin","position","morseString","morseStringCharacters","timing","time","soundShort","setTimeout","colorShort","soundOff","soundLong","colorLong","soundSpace","colorSpace","animationStart","map","char","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nimport { convertToMorseString } from \"../../functions/convertTranscriptToMorseString\";\nimport { convertTranscriptToMorseSound } from \"../../functions/convertTranscriptToMorseSound\";\nimport { convertMorseStringToChars } from \"../../functions/convertMorseStringToChars\";\n\nimport { conversionTable } from \"../../functions/conversionTable\";\nimport off from \"../../assets/off.png\";\nimport between from \"../../assets/between.png\";\nimport long from \"../../assets/long.png\";\nimport short from \"../../assets/short.png\";\nimport low from \"../../assets/low.png\";\nimport \"./index.css\";\n\n// SPEECH RECOGNITION\nconst options = {\n  autoStart: false,\n};\n\nconst propTypes = {\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func,\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening,\n}) => {\n  //ANIMATIONS\n  const [color, setColor] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [url, setUrl] = useState(off);\n  const style = {\n    textAlign: \"center\",\n    backgroundImage: `url(${url})`,\n    backgroundColor: \"white\",\n    minHeight: \"100vh\",\n    minWidth: \"100vw\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"auto\",\n    margin: \"0\",\n    position: \"relative\",\n  };\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  const morseString = convertToMorseString(transcript, conversionTable);\n  const morseStringCharacters = convertMorseStringToChars(morseString);\n\n  // ANIMATIONS 2\n  let timing;\n  let time = 0;\n  function soundShort() {\n    time = time + 80;\n    timing = setTimeout(colorShort, time);\n    time = time + 180;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundLong() {\n    time = time + 80;\n    timing = setTimeout(colorLong, time);\n    time = time + 380;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function soundSpace() {\n    time = time + 80;\n    timing = setTimeout(colorSpace, time);\n    time = time + 820;\n    timing = setTimeout(soundOff, time);\n  }\n\n  function colorShort() {\n    setColor(\"green\");\n    setName(\".\");\n    setUrl(short);\n  }\n\n  function colorLong() {\n    setColor(\"purple\");\n    setName(\"_\");\n    setUrl(long);\n  }\n\n  function colorSpace() {\n    setColor(\"red\");\n    setName(\"space\");\n    setUrl(off);\n  }\n\n  function soundOff() {\n    setColor(\"brown\");\n    setName(\" \");\n  }\n\n  function animationStart() {\n    morseStringCharacters.map((char) => {\n      if (char === \".\") {\n        soundShort();\n      }\n      if (char === \"_\") {\n        soundLong();\n      } else if (char === \" \") {\n        soundSpace();\n      }\n    });\n  }\n\n  return (\n    <div className=\"transition\" style={style}>\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(\"sos\");\n        }}\n      >\n        Send SOS\n      </button>\n\n      <button\n        onClick={(e) => {\n          startListening();\n        }}\n      >\n        <span>🔴</span> Message\n      </button>\n      <button\n        onClick={(e) => {\n          abortListening();\n        }}\n      >\n        ◽ Stop\n      </button>\n\n      <button\n        onClick={(e) => {\n          convertTranscriptToMorseSound(transcript);\n          animationStart();\n        }}\n      >\n        ▶ Play\n      </button>\n      <button onClick={resetTranscript}>Reset</button>\n\n      <h3>press 🔴 record to start </h3>\n\n      <h1 style={{ color: \"white\" }}>{name}</h1>\n\n      <h3>Your Message: {transcript}</h3>\n      <h3> In Morse Code: {morseString}</h3>\n      \n\n     <h1 >🔴</h1>\n\n    </div>\n    \n  );\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);\n"]},"metadata":{},"sourceType":"module"}