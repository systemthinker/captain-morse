{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js\";\nimport React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\nexport default function MorseToSound(props) {\n  var globalAudioContext = new window.AudioContext();\n  let myVar;\n  let time = 0;\n  let morseString = convertToMorse;\n  const [color, setColor] = useState('');\n  const [name, setName] = useState('type');\n  const lightBulb = {\n    width: \"200px\",\n    height: \"200px\",\n    borderRadius: \"50%\",\n    backgroundColor: color\n  };\n\n  function setTheTimeOutGreen() {\n    time = time + 20;\n    console.log('green');\n    myVar = setTimeout(setGreen, time);\n    time = time + 80;\n    myVar = setTimeout(setNull, time);\n  }\n\n  function setTheTimeOutPurple() {\n    time = time + 20;\n    console.log('purple');\n    myVar = setTimeout(setPurple, time);\n    time = time + 280;\n    myVar = setTimeout(setNull, time);\n  }\n\n  function setTheTimeOutRed() {\n    time = time + 20;\n    console.log('red');\n    myVar = setTimeout(setRed, time);\n    time = time + 680;\n    myVar = setTimeout(setNull, time);\n  }\n\n  function setGreen() {\n    setColor('green');\n    setName('kort');\n  }\n\n  function setPurple() {\n    setColor('purple');\n    setName('lang');\n  }\n\n  function setRed() {\n    setColor('red');\n    setName('einde');\n  }\n\n  function setNull() {\n    setColor('white');\n  }\n\n  let morseStringCharacters = [];\n  morseString.map(function (c) {\n    for (let i = 0; i < c.length; i++) {\n      morseStringCharacters.push(c[i]);\n    }\n  });\n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime; // morsecode\n\n    var code = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\"\n    };\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n\n      for (var i = 0; i <= transcript.length; i++) {\n        let toConvertChar = transcript.substr(i, 1).toLowerCase();\n        let convertedChar = conversionTable[toConvertChar];\n\n        if (convertedChar === undefined) {\n          convertedChar = \" \";\n        }\n\n        morseString.push(convertedChar); // recognised character\n      }\n\n      return morseString;\n    } // generate code for text\n\n\n    function makecode(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var codedata = data.substr(i, 1).toLowerCase();\n        codedata = code[codedata]; // recognised character\n\n        if (codedata !== undefined) {\n          maketime(codedata);\n        } // unrecognised character\n        else {\n            time += unit * 7;\n          }\n      }\n    } // generate time for code\n\n\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n        timedata *= unit;\n\n        if (timedata > 0) {\n          maketone(timedata);\n          time += timedata; // tone gap\n\n          time += unit * 1;\n        }\n      } // char gap\n\n\n      time += unit * 2;\n    } // generate tone for time\n\n\n    function maketone(data) {\n      var start = time;\n      var stop = time + data; // filter: envelope the tone slightly\n\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop); // toggle achtergrond rood\n    } // create: oscillator, gain, destination\n\n\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination; // connect: oscillator -> gain -> destination\n\n    osci.connect(gain);\n    gain.connect(dest); // start oscillator\n\n    osci.start(time); // begin encoding: text -> code -> time -> tone\n\n    makecode(text); // return web audio context for reuse / control\n\n    return cont;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }, \"Hello from Morse\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(\"sos\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, \"SOS Test\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.startListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.abortListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, \"Stop Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(props.transcript);\n      props.animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, \"Play Morse Code Sound\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, \"test\"));\n}","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js"],"names":["React","useState","MorseToAnimation","MorseToSound","props","globalAudioContext","window","AudioContext","myVar","time","morseString","convertToMorse","color","setColor","name","setName","lightBulb","width","height","borderRadius","backgroundColor","setTheTimeOutGreen","console","log","setTimeout","setGreen","setNull","setTheTimeOutPurple","setPurple","setTheTimeOutRed","setRed","morseStringCharacters","map","c","i","length","push","morsecode","text","unit","freq","cont","currentTime","code","a","b","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","transcript","toConvertChar","substr","toLowerCase","convertedChar","conversionTable","undefined","makecode","data","codedata","maketime","timedata","maketone","start","stop","gain","linearRampToValueAtTime","osci","createOscillator","frequency","value","createGain","dest","destination","connect","startListen","abortListen","animationStart"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\n\n\nexport default function MorseToSound(props) {\n  var globalAudioContext = new window.AudioContext();\n\n  let myVar;\n   let time = 0;\n\n   let morseString = convertToMorse\n   \n\n    const [color,setColor] = useState('')\n    const [name, setName ] = useState('type')\n    \n    const lightBulb = {\n        width: \"200px\",\n        height: \"200px\",\n        borderRadius: \"50%\",\n        backgroundColor: color,\n        };\n        \n\n    function setTheTimeOutGreen(){\n        time = time + 20;\n        console.log('green')\n        myVar = setTimeout( setGreen, time)\n        \n        time = time + 80;\n        myVar = setTimeout( setNull, time)\n       \n        \n       \n    }\n\n    function setTheTimeOutPurple(){\n        time = time + 20;\n        console.log('purple')\n        myVar = setTimeout( setPurple, time)\n        \n        time = time + 280;\n        myVar = setTimeout( setNull, time)\n       \n        \n    }\n\n    function setTheTimeOutRed(){\n        time = time + 20;\n        console.log('red')\n        myVar = setTimeout( setRed, time)\n        \n        time = time + 680;\n        myVar = setTimeout( setNull, time)\n    }\n\n    function setGreen(){\n        setColor('green')\n        setName('kort')\n    }\n\n    function setPurple(){\n        setColor('purple')\n        setName('lang')\n    }\n\n    function setRed(){\n        setColor('red')\n        setName('einde')\n    }\n\n    function setNull(){\n        setColor('white')\n    }\n    \n    \n   \n  let morseStringCharacters = []\n    morseString.map(function (c) {\n \n      for (let i = 0; i < c.length; i++) {\n     \n       morseStringCharacters.push(c[i])\n      }\n    \n  });\n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime;\n\n    // morsecode\n    var code = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\",\n    };\n\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n      for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      \n      let convertedChar = conversionTable[toConvertChar];\n      if (convertedChar === undefined) {\n      convertedChar = \" \";\n      }\n      \n      morseString.push(convertedChar);\n      // recognised character\n      }\n      \n      return morseString;\n      } \n\n    // generate code for text\n    function makecode(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var codedata = data.substr(i, 1).toLowerCase();\n\n        codedata = code[codedata];\n\n        // recognised character\n        if (codedata !== undefined) {\n          maketime(codedata);\n        }\n        // unrecognised character\n        else {\n          time += unit * 7;\n        }\n      }\n    }\n\n    // generate time for code\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n\n        timedata *= unit;\n        if (timedata > 0) {\n          maketone(timedata);\n\n          time += timedata;\n          // tone gap\n          time += unit * 1;\n        }\n      }\n      // char gap\n      time += unit * 2;\n    }\n\n    // generate tone for time\n    function maketone(data) {\n      var start = time;\n      var stop = time + data;\n\n      // filter: envelope the tone slightly\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop);\n      // toggle achtergrond rood\n    }\n\n    // create: oscillator, gain, destination\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination;\n    // connect: oscillator -> gain -> destination\n    osci.connect(gain);\n    gain.connect(dest);\n    // start oscillator\n    osci.start(time);\n\n    // begin encoding: text -> code -> time -> tone\n    makecode(text);\n\n    // return web audio context for reuse / control\n    return cont;\n  }\n\n  return (\n    <>\n      <div>Hello from Morse</div>\n\n      <button\n        onClick={(e) => {\n          morsecode(\"sos\");\n        }}\n      >\n        SOS Test\n      </button>\n      <button\n        onClick={(e) => {\n          props.startListen();\n        }}\n      >\n        Record\n      </button>\n      <button\n        onClick={(e) => {\n          props.abortListen();\n        }}\n      >\n        Stop Record\n      </button>\n      <button\n        onClick={(e) => {\n          morsecode(props.transcript);\n          props.animationStart();\n        }}\n      >\n        Play Morse Code Sound\n      </button>\n      <button onClick={(e)=>{props.animationStart()}}>test</button>\n      \n     \n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}