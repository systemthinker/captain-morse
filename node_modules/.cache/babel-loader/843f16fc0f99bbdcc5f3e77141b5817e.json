{"ast":null,"code":"import React from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\nexport default function TranscriptToMorseCharacters(props) {\n  // morsecode\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\"\n  }; // generate code for text\n\n  function convertToMorse(transcript) {\n    let morseString = [];\n\n    for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      let convertedChar = conversionTable[toConvertChar];\n\n      if (convertedChar === undefined) {\n        convertedChar = \" \";\n      }\n\n      morseString.push(convertedChar); // recognised character\n    }\n\n    return morseString;\n  }\n\n  const morseString = convertToMorse(props.transcript);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/TranscriptToMorseCharacters/index.js"],"names":["React","MorseToAnimation","TranscriptToMorseCharacters","props","conversionTable","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","convertToMorse","transcript","morseString","length","toConvertChar","substr","toLowerCase","convertedChar","undefined","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,eAAe,SAASC,2BAAT,CAAqCC,KAArC,EAA4C;AACzD;AACA,MAAIC,eAAe,GAAG;AACpBC,IAAAA,CAAC,EAAE,IADiB;AAEpBC,IAAAA,CAAC,EAAE,MAFiB;AAGpBC,IAAAA,CAAC,EAAE,MAHiB;AAIpBC,IAAAA,CAAC,EAAE,KAJiB;AAKpBC,IAAAA,CAAC,EAAE,GALiB;AAMpBC,IAAAA,CAAC,EAAE,MANiB;AAOpBC,IAAAA,CAAC,EAAE,KAPiB;AAQpBC,IAAAA,CAAC,EAAE,MARiB;AASpBC,IAAAA,CAAC,EAAE,IATiB;AAUpBC,IAAAA,CAAC,EAAE,MAViB;AAWpBC,IAAAA,CAAC,EAAE,KAXiB;AAYpBC,IAAAA,CAAC,EAAE,MAZiB;AAapBC,IAAAA,CAAC,EAAE,IAbiB;AAcpBC,IAAAA,CAAC,EAAE,IAdiB;AAepBC,IAAAA,CAAC,EAAE,KAfiB;AAgBpBC,IAAAA,CAAC,EAAE,MAhBiB;AAiBpBC,IAAAA,CAAC,EAAE,MAjBiB;AAkBpBC,IAAAA,CAAC,EAAE,KAlBiB;AAmBpBC,IAAAA,CAAC,EAAE,KAnBiB;AAoBpBC,IAAAA,CAAC,EAAE,GApBiB;AAqBpBC,IAAAA,CAAC,EAAE,KArBiB;AAsBpBC,IAAAA,CAAC,EAAE,MAtBiB;AAuBpBC,IAAAA,CAAC,EAAE,KAvBiB;AAwBpBC,IAAAA,CAAC,EAAE,MAxBiB;AAyBpBC,IAAAA,CAAC,EAAE,MAzBiB;AA0BpBC,IAAAA,CAAC,EAAE,MA1BiB;AA2BpB,OAAG,OA3BiB;AA4BpB,OAAG,OA5BiB;AA6BpB,OAAG,OA7BiB;AA8BpB,OAAG,OA9BiB;AA+BpB,OAAG,OA/BiB;AAgCpB,OAAG,OAhCiB;AAiCpB,OAAG,OAjCiB;AAkCpB,OAAG,OAlCiB;AAmCpB,OAAG,OAnCiB;AAoCpB,OAAG;AApCiB,GAAtB,CAFyD,CAyCzD;;AACA,WAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAImB,UAAU,CAACE,MAAhC,EAAwCrB,CAAC,EAAzC,EAA6C;AAC3C,UAAIsB,aAAa,GAAGH,UAAU,CAACI,MAAX,CAAkBvB,CAAlB,EAAqB,CAArB,EAAwBwB,WAAxB,EAApB;AAEA,UAAIC,aAAa,GAAGlC,eAAe,CAAC+B,aAAD,CAAnC;;AACA,UAAIG,aAAa,KAAKC,SAAtB,EAAiC;AAC/BD,QAAAA,aAAa,GAAG,GAAhB;AACD;;AAEDL,MAAAA,WAAW,CAACO,IAAZ,CAAiBF,aAAjB,EAR2C,CAS3C;AACD;;AAED,WAAOL,WAAP;AACD;;AAED,QAAMA,WAAW,GAAGF,cAAc,CAAC5B,KAAK,CAAC6B,UAAP,CAAlC;AAEA,sBACE,yCADF;AAMD","sourcesContent":["import React from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\n\nexport default function TranscriptToMorseCharacters(props) {\n  // morsecode\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\",\n  };\n\n  // generate code for text\n  function convertToMorse(transcript) {\n    let morseString = [];\n    for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n\n      let convertedChar = conversionTable[toConvertChar];\n      if (convertedChar === undefined) {\n        convertedChar = \" \";\n      }\n    \n      morseString.push(convertedChar);\n      // recognised character\n    }\n\n    return morseString;\n  }\n\n  const morseString = convertToMorse(props.transcript);\n  \n  return (\n    <>\n      {/* <h3>Transcript To Morse: {morseString}</h3>\n      <MorseToAnimation morseString={morseString} /> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}