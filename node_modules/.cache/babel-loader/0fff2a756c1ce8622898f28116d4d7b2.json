{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js\";\nimport React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\nexport default function MorseToSound(props) {\n  var globalAudioContext = new window.AudioContext();\n  const [color, setColor] = useState('');\n  const [name, setName] = useState('type');\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\"\n  };\n\n  function convertToMorse(transcript) {\n    let morseString = [];\n\n    for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      let convertedChar = conversionTable[toConvertChar];\n\n      if (convertedChar === undefined) {\n        convertedChar = \" \";\n      }\n\n      morseString.push(convertedChar); // recognised character\n    }\n\n    return morseString;\n  }\n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime; // morsecode\n\n    var conversionTable = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\"\n    };\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n\n      for (var i = 0; i <= transcript.length; i++) {\n        let toConvertChar = transcript.substr(i, 1).toLowerCase();\n        let convertedChar = conversionTable[toConvertChar];\n\n        if (convertedChar === undefined) {\n          convertedChar = \" \";\n        }\n\n        morseString.push(convertedChar); // recognised character\n      }\n\n      return morseString;\n    } // generate time for code\n\n\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n        timedata *= unit;\n\n        if (timedata > 0) {\n          maketone(timedata);\n          time += timedata; // tone gap\n\n          time += unit * 1;\n        }\n      } // char gap\n\n\n      time += unit * 2;\n    } // generate tone for time\n\n\n    function maketone(data) {\n      var start = time;\n      var stop = time + data; // filter: envelope the tone slightly\n\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop); // toggle achtergrond rood\n    } // create: oscillator, gain, destination\n\n\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination; // connect: oscillator -> gain -> destination\n\n    osci.connect(gain);\n    gain.connect(dest); // start oscillator\n\n    osci.start(time); // begin encoding: text -> code -> time -> tone\n\n    convertToMorse(conversionTable); // return web audio context for reuse / control\n\n    return cont;\n  }\n\n  let myVar;\n  let timeAnimation = 0;\n  let morseString = convertToMorseprops.transcript;\n  const lightBulb = {\n    width: \"200px\",\n    height: \"200px\",\n    borderRadius: \"50%\",\n    backgroundColor: color\n  };\n\n  function setTheTimeOutGreen() {\n    timeAnimation = timeAnimation + 20;\n    console.log('green');\n    myVar = setTimeout(setGreen, timeAnimation);\n    timeAnimation = timeAnimation + 80;\n    myVar = setTimeout(setNull, timeAnimation);\n  }\n\n  function setTheTimeOutPurple() {\n    timeAnimation = timeAnimation + 20;\n    console.log('purple');\n    myVar = setTimeout(setPurple, timeAnimation);\n    timeAnimation = timeAnimation + 280;\n    myVar = setTimeout(setNull, timeAnimation);\n  }\n\n  function setTheTimeOutRed() {\n    timeAnimation = timeAnimation + 20;\n    console.log('red');\n    myVar = setTimeout(setRed, timeAnimation);\n    timeAnimation = timeAnimation + 680;\n    myVar = setTimeout(setNull, timeAnimation);\n  }\n\n  function setGreen() {\n    setColor('green');\n    setName('kort');\n  }\n\n  function setPurple() {\n    setColor('purple');\n    setName('lang');\n  }\n\n  function setRed() {\n    setColor('red');\n    setName('einde');\n  }\n\n  function setNull() {\n    setColor('white');\n  }\n\n  let morseStringCharacters = [];\n  morseString.map(function (c) {\n    for (let i = 0; i < c.length; i++) {\n      morseStringCharacters.push(c[i]);\n    }\n  });\n\n  function animationStart() {\n    morseStringCharacters.map(char => {\n      if (char === '.') {\n        setTheTimeOutGreen();\n      }\n\n      if (char === '_') {\n        setTheTimeOutPurple();\n      } else if (char === ' ') {\n        setTheTimeOutRed();\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }, \"Hello from Morse\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(\"sos\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }\n  }, \"SOS Test\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.startListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.abortListen();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }\n  }, \"Stop Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      morsecode(props.transcript);\n      animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, \"Play Morse Code Sound\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => {\n      props.animationStart();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }\n  }, \"test\"));\n}","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/MorseToSound/index.js"],"names":["React","useState","MorseToAnimation","MorseToSound","props","globalAudioContext","window","AudioContext","color","setColor","name","setName","conversionTable","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","convertToMorse","transcript","morseString","length","toConvertChar","substr","toLowerCase","convertedChar","undefined","push","morsecode","text","unit","freq","cont","time","currentTime","maketime","data","timedata","maketone","start","stop","gain","linearRampToValueAtTime","osci","createOscillator","frequency","value","createGain","dest","destination","connect","myVar","timeAnimation","convertToMorseprops","lightBulb","width","height","borderRadius","backgroundColor","setTheTimeOutGreen","console","log","setTimeout","setGreen","setNull","setTheTimeOutPurple","setPurple","setTheTimeOutRed","setRed","morseStringCharacters","map","animationStart","char","startListen","abortListen"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport MorseToAnimation from \"../MorseToAnimation\";\n\n\nexport default function MorseToSound(props) {\n  \n  var globalAudioContext = new window.AudioContext();\n  const [color,setColor] = useState('')\n  const [name, setName ] = useState('type')\n\n\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\",\n  };\n\n\n  function convertToMorse(transcript) {\n    let morseString = [];\n    for (var i = 0; i <= transcript.length; i++) {\n    let toConvertChar = transcript.substr(i, 1).toLowerCase();\n    \n    let convertedChar = conversionTable[toConvertChar];\n    if (convertedChar === undefined) {\n    convertedChar = \" \";\n    }\n    \n    morseString.push(convertedChar);\n    // recognised character\n    }\n    \n    return morseString;\n    } \n\n  function morsecode(text, unit, freq) {\n    // defaults\n    unit = unit ? unit : 0.1;\n    freq = freq ? freq : 50;\n    var cont = globalAudioContext;\n    var time = cont.currentTime;\n\n    // morsecode\n    var conversionTable = {\n      a: \"._\",\n      b: \"_...\",\n      c: \"_._.\",\n      d: \"_..\",\n      e: \".\",\n      f: \".._.\",\n      g: \"__.\",\n      h: \"....\",\n      i: \"..\",\n      j: \".___\",\n      k: \"_._\",\n      l: \"._..\",\n      m: \"__\",\n      n: \"_.\",\n      o: \"___\",\n      p: \".__.\",\n      q: \"__._\",\n      r: \"._.\",\n      s: \"...\",\n      t: \"_\",\n      u: \".._\",\n      v: \"..._\",\n      w: \".__\",\n      x: \"_.._\",\n      y: \"_.__\",\n      z: \"__..\",\n      0: \"_____\",\n      1: \".____\",\n      2: \"..___\",\n      3: \"...__\",\n      4: \"...._\",\n      5: \".....\",\n      6: \"_....\",\n      7: \"__...\",\n      8: \"___..\",\n      9: \"____.\",\n    };\n\n\n    function convertToMorse(transcript) {\n      let morseString = [];\n      for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      \n      let convertedChar = conversionTable[toConvertChar];\n      if (convertedChar === undefined) {\n      convertedChar = \" \";\n      }\n      \n      morseString.push(convertedChar);\n      // recognised character\n      }\n      \n      return morseString;\n      } \n \n\n    // generate time for code\n    function maketime(data) {\n      for (var i = 0; i <= data.length; i++) {\n        var timedata = data.substr(i, 1);\n        timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n\n        timedata *= unit;\n        if (timedata > 0) {\n          maketone(timedata);\n\n          time += timedata;\n          // tone gap\n          time += unit * 1;\n        }\n      }\n      // char gap\n      time += unit * 2;\n    }\n\n    // generate tone for time\n    function maketone(data) {\n      var start = time;\n      var stop = time + data;\n\n      // filter: envelope the tone slightly\n      gain.gain.linearRampToValueAtTime(0, start);\n      gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n      gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n      gain.gain.linearRampToValueAtTime(0, stop);\n      // toggle achtergrond rood\n    }\n\n    // create: oscillator, gain, destination\n    var osci = cont.createOscillator();\n    osci.frequency.value = freq;\n    var gain = cont.createGain();\n    gain.gain.value = 0;\n    var dest = cont.destination;\n    // connect: oscillator -> gain -> destination\n    osci.connect(gain);\n    gain.connect(dest);\n    // start oscillator\n    osci.start(time);\n\n    // begin encoding: text -> code -> time -> tone\n    convertToMorse(conversionTable);\n\n    // return web audio context for reuse / control\n    return cont;\n  }\n\n\n\n  let myVar;\n  let timeAnimation = 0;\n\n  let morseString = convertToMorseprops.transcript;\n  \n\n\n   \n   const lightBulb = {\n       width: \"200px\",\n       height: \"200px\",\n       borderRadius: \"50%\",\n       backgroundColor: color,\n       };\n       \n\n   function setTheTimeOutGreen(){\n    timeAnimation = timeAnimation + 20;\n       console.log('green')\n       myVar = setTimeout( setGreen, timeAnimation)\n       \n       timeAnimation = timeAnimation + 80;\n       myVar = setTimeout( setNull, timeAnimation)\n      \n       \n      \n   }\n\n   function setTheTimeOutPurple(){\n    timeAnimation = timeAnimation + 20;\n       console.log('purple')\n       myVar = setTimeout( setPurple, timeAnimation)\n       \n       timeAnimation = timeAnimation + 280;\n       myVar = setTimeout( setNull, timeAnimation)\n      \n       \n   }\n\n   function setTheTimeOutRed(){\n    timeAnimation = timeAnimation + 20;\n       console.log('red')\n       myVar = setTimeout( setRed, timeAnimation)\n       \n       timeAnimation = timeAnimation + 680;\n       myVar = setTimeout( setNull, timeAnimation)\n   }\n\n   function setGreen(){\n       setColor('green')\n       setName('kort')\n   }\n\n   function setPurple(){\n       setColor('purple')\n       setName('lang')\n   }\n\n   function setRed(){\n       setColor('red')\n       setName('einde')\n   }\n\n   function setNull(){\n       setColor('white')\n   }\n   \n\n   let morseStringCharacters = []\n   morseString.map(function (c) {\n\n     for (let i = 0; i < c.length; i++) {\n    \n      morseStringCharacters.push(c[i])\n     }\n   \n });\n\n\n  function animationStart(){\n    \n    morseStringCharacters.map((char)=>{\n    \n        if(char === '.'){\n            setTheTimeOutGreen();\n           \n        }\n    \n        if(char === '_') {\n            setTheTimeOutPurple()\n           \n        }\n         else if(char === ' ') {\n         \n            setTheTimeOutRed()\n        \n        }\n    \n    })\n      }\n  \n\n\n  return (\n    <>\n      <div>Hello from Morse</div>\n\n      <button\n        onClick={(e) => {\n          morsecode(\"sos\");\n        }}\n      >\n        SOS Test\n      </button>\n      <button\n        onClick={(e) => {\n          props.startListen();\n        }}\n      >\n        Record\n      </button>\n      <button\n        onClick={(e) => {\n          props.abortListen();\n        }}\n      >\n        Stop Record\n      </button>\n      <button\n        onClick={(e) => {\n          morsecode(props.transcript);\n          animationStart();\n        }}\n      >\n        Play Morse Code Sound\n      </button>\n      <button onClick={(e)=>{props.animationStart()}}>test</button>\n      \n     \n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}