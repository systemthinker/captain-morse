{"ast":null,"code":"var globalAudioContext = new window.AudioContext();\nexport function convertTranscriptToMorseSound(text) {\n  // defaults\n  const unit = 0.1;\n  const freq = 200;\n  var cont = globalAudioContext;\n  var time = cont.currentTime; // morsecode\n\n  var code = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\"\n  }; // generate code for text\n\n  function makecode(data) {\n    for (var i = 0; i <= data.length; i++) {\n      var codedata = data.substr(i, 1).toLowerCase();\n      codedata = code[codedata]; // recognised character\n\n      if (codedata !== undefined) {\n        maketime(codedata);\n      } // unrecognised character\n      else {\n          time += unit * 7;\n        }\n    }\n  } // generate time for code\n\n\n  function maketime(data) {\n    for (var i = 0; i <= data.length; i++) {\n      var timedata = data.substr(i, 1);\n      timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n      timedata *= unit;\n\n      if (timedata > 0) {\n        maketone(timedata);\n        time += timedata; // tone gap\n\n        time += unit * 1;\n      }\n    } // char gap\n\n\n    time += unit * 2;\n  } // generate tone for time\n\n\n  function maketone(data) {\n    var start = time;\n    var stop = time + data; // filter: envelope the tone slightly\n\n    gain.gain.linearRampToValueAtTime(0, start);\n    gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n    gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n    gain.gain.linearRampToValueAtTime(0, stop); // toggle achtergrond rood\n  } // create: oscillator, gain, destination\n\n\n  var osci = cont.createOscillator();\n  osci.frequency.value = freq;\n  var gain = cont.createGain();\n  gain.gain.value = 0;\n  var dest = cont.destination; // connect: oscillator -> gain -> destination\n\n  osci.connect(gain);\n  gain.connect(dest); // start oscillator\n\n  osci.start(time); // begin encoding: text -> code -> time -> tone\n\n  makecode(text); // return web audio context for reuse / control\n\n  return cont;\n}","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/functions/convertTranscriptToMorseSound.js"],"names":["globalAudioContext","window","AudioContext","convertTranscriptToMorseSound","text","unit","freq","cont","time","currentTime","code","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","makecode","data","length","codedata","substr","toLowerCase","undefined","maketime","timedata","maketone","start","stop","gain","linearRampToValueAtTime","osci","createOscillator","frequency","value","createGain","dest","destination","connect"],"mappings":"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","sourcesContent":["var globalAudioContext = new window.AudioContext();\n\nexport function convertTranscriptToMorseSound(text) {\n  // defaults\n  const unit = 0.1;\n  const freq = 200;\n  var cont = globalAudioContext;\n  var time = cont.currentTime;\n\n  // morsecode\n  var code = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\",\n  };\n\n  // generate code for text\n  function makecode(data) {\n    for (var i = 0; i <= data.length; i++) {\n      var codedata = data.substr(i, 1).toLowerCase();\n\n      codedata = code[codedata];\n\n      // recognised character\n      if (codedata !== undefined) {\n        maketime(codedata);\n      }\n      // unrecognised character\n      else {\n        time += unit * 7;\n      }\n    }\n  }\n\n  // generate time for code\n  function maketime(data) {\n    for (var i = 0; i <= data.length; i++) {\n      var timedata = data.substr(i, 1);\n      timedata = timedata === \".\" ? 1 : timedata === \"_\" ? 3 : 0;\n\n      timedata *= unit;\n      if (timedata > 0) {\n        maketone(timedata);\n\n        time += timedata;\n        // tone gap\n        time += unit * 1;\n      }\n    }\n    // char gap\n    time += unit * 2;\n  }\n\n  // generate tone for time\n  function maketone(data) {\n    var start = time;\n    var stop = time + data;\n\n    // filter: envelope the tone slightly\n    gain.gain.linearRampToValueAtTime(0, start);\n    gain.gain.linearRampToValueAtTime(1, start + unit / 8);\n    gain.gain.linearRampToValueAtTime(1, stop - unit / 16);\n    gain.gain.linearRampToValueAtTime(0, stop);\n    // toggle achtergrond rood\n  }\n\n  // create: oscillator, gain, destination\n  var osci = cont.createOscillator();\n  osci.frequency.value = freq;\n  var gain = cont.createGain();\n  gain.gain.value = 0;\n  var dest = cont.destination;\n  // connect: oscillator -> gain -> destination\n  osci.connect(gain);\n  gain.connect(dest);\n  // start oscillator\n  osci.start(time);\n\n  // begin encoding: text -> code -> time -> tone\n  makecode(text);\n\n  // return web audio context for reuse / control\n  return cont;\n}\n"]},"metadata":{},"sourceType":"module"}