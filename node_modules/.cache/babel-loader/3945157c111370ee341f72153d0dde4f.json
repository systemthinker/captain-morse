{"ast":null,"code":"var _jsxFileName = \"/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport MorseToSound from \"../MorseToSound\";\nimport TranscriptToMorseCharacters from \"../TranscriptToMorseCharacters\";\nconst options = {\n  autoStart: false\n};\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening\n}) => {\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\"\n  };\n\n  function convertToMorse(transcript) {\n    let morseString = [];\n\n    for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      let convertedChar = conversionTable[toConvertChar];\n\n      if (convertedChar === undefined) {\n        convertedChar = \" \";\n      }\n\n      morseString.push(convertedChar); // recognised character\n    }\n\n    return morseString;\n  }\n\n  const morseString = convertToMorse(transcript);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(MorseToSound, {\n    transcript: transcript,\n    abortListen: abortListening,\n    startListen: startListening,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Transcript: \", transcript), /*#__PURE__*/React.createElement(TranscriptToMorseCharacters, {\n    transcript: transcript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }));\n};\n\nDictaphone.propTypes = propTypes;\nexport default SpeechRecognition(options)(Dictaphone);","map":{"version":3,"sources":["/home/robbert/code/morse-code-masters/src/components/SpeechRecognition/index.js"],"names":["React","PropTypes","SpeechRecognition","MorseToSound","TranscriptToMorseCharacters","options","autoStart","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","abortListening","startListening","Dictaphone","conversionTable","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","convertToMorse","morseString","length","toConvertChar","substr","toLowerCase","convertedChar","undefined","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport MorseToSound from \"../MorseToSound\";\nimport TranscriptToMorseCharacters from \"../TranscriptToMorseCharacters\";\n\nconst options = {\n  autoStart: false,\n};\n\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool,\n  abortListening: PropTypes.func,\n  startListening: PropTypes.func,\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  abortListening,\n  startListening,\n}) => {\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  var conversionTable = {\n    a: \"._\",\n    b: \"_...\",\n    c: \"_._.\",\n    d: \"_..\",\n    e: \".\",\n    f: \".._.\",\n    g: \"__.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".___\",\n    k: \"_._\",\n    l: \"._..\",\n    m: \"__\",\n    n: \"_.\",\n    o: \"___\",\n    p: \".__.\",\n    q: \"__._\",\n    r: \"._.\",\n    s: \"...\",\n    t: \"_\",\n    u: \".._\",\n    v: \"..._\",\n    w: \".__\",\n    x: \"_.._\",\n    y: \"_.__\",\n    z: \"__..\",\n    0: \"_____\",\n    1: \".____\",\n    2: \"..___\",\n    3: \"...__\",\n    4: \"...._\",\n    5: \".....\",\n    6: \"_....\",\n    7: \"__...\",\n    8: \"___..\",\n    9: \"____.\",\n    }; \n\n    function convertToMorse(transcript) {\n      let morseString = [];\n      for (var i = 0; i <= transcript.length; i++) {\n      let toConvertChar = transcript.substr(i, 1).toLowerCase();\n      \n      let convertedChar = conversionTable[toConvertChar];\n      if (convertedChar === undefined) {\n      convertedChar = \" \";\n      }\n      \n      morseString.push(convertedChar);\n      // recognised character\n      }\n      \n      return morseString;\n      } \n\n      const morseString = convertToMorse(transcript); \n      \n  return (\n    <div>\n      <button onClick={resetTranscript}>Reset</button>\n      <MorseToSound\n        transcript={transcript}\n        abortListen={abortListening}\n        startListen={startListening}\n      />\n      <h3>Transcript: {transcript}</h3>\n      <TranscriptToMorseCharacters transcript={transcript} />\n    </div>\n  );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(options)(Dictaphone);\n"]},"metadata":{},"sourceType":"module"}